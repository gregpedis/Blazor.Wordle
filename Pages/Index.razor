@inject IJSRuntime JSRuntime
@page "/"
@using Wordle.Logic;
@using System.Text.RegularExpressions;

<PageTitle>Wordle</PageTitle>

<div class="row justify-content-center">
	<div class="col"></div> @* Spacing *@
	<div class="col-auto">
		<h1 style="color:gray">Wordle</h1>
	</div>
	<div class="col"></div> @* Spacing *@
</div>

<br />

@* TODO: Make this a component *@
<div class="row justify-content-center">
	<div class="col"></div> @* Spacing *@
	<div class="col-auto">
		@foreach (var attempt in attempts)
		{
			<AttemptRow Attempt="attempt"></AttemptRow>
		}
	</div>
	<div class="col"></div> @* Spacing *@
</div>

<br />

<Keyboard LetterColors="LetterColors" AddLetter="AddLetter" DeleteLetter="DeleteLetter" Submit="Submit"></Keyboard>
<br />
<FadinTextBox @ref="notification" Reset="Reset" />
<br />
<button @onclick=Reset>RESET</button>

@* <span>@targetWord</span> *@

@code {

	private int attemptIndex = 0;
	private List<Attempt> attempts;
	private string targetWord = string.Empty;
	private Dictionary<char, LetterColor> LetterColors;

	private FadinTextBox notification;
	private bool gameOver;

	private void Reset()
	{
		gameOver = false;
		attemptIndex = 0;
		targetWord = WordDatabase.Pick();
		attempts = Enumerable.Range(0, 6).Select(x => new Attempt()).ToList();
		LetterColors = LetterColorService.Default;
		StateHasChanged();
	}

	protected override void OnInitialized() => Reset();

	#region LOGIC

	private void AddLetter(char letter)
	{
		if (gameOver)
		{
			return;
		}
		var soFar = attempts[attemptIndex].ToString();
		if (soFar.Length < 5)
		{
			var newValue = (soFar + char.ToUpper(letter)).PadRight(5);
			attempts[attemptIndex].SetWord(newValue);
		}
	}

	private void DeleteLetter()
	{
		if (gameOver)
		{
			return;
		}
		var soFar = attempts[attemptIndex].ToString();
		if (soFar.Length > 0)
		{
			var newValue = soFar.Substring(0, soFar.Length - 1).PadRight(5);
			attempts[attemptIndex].SetWord(newValue);
		}
	}

	// TODO: Reset logic
	// TODO: Mobile-first UI design
	private async Task Submit()
	{
		if (gameOver)
		{
			return;
		}
		var guess = attempts[attemptIndex].ToString();
		if (guess.Length < 5)
		{
			await notification.Notify("Word needs 5 letters", "yellow");
		}
		else if (!WordDatabase.Exists(guess))
		{
			await notification.Notify("Word does not exist", "yellow");
		}
		else
		{
			var newColors = LetterColorService.Update(guess, targetWord, LetterColors);
			attempts[attemptIndex].SetColors(newColors);
			StateHasChanged();

			if (WordFound)
			{
				gameOver = true;
				await notification.Notify("You won! :)", "green");
				// show button for replay
			}
			else
			{
				if (attemptIndex == 5)
				{
					gameOver = true;
					Console.WriteLine(targetWord);
					await notification.Notify($"[{targetWord}] You lost. :(", "red");
					// show button for replay
				}
				else
				{
					attemptIndex++;
				}
			}
		}
	}

	private bool WordFound =>
		attempts[attemptIndex].ToString() == targetWord;

	#endregion

	#region Keyboard_Event
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JSRuntime.InvokeAsync<string>("addCustomEventListener", DotNetObjectReference.Create(this));
		}
	}

	[JSInvokable]
	public async Task KeyDown(string key)
	{
		if (key.Length == 1 && Regex.IsMatch(key, "[a-zA-Z]"))
		{
			AddLetter(key.ToUpper()[0]);
		}
		else if (key == "Enter")
		{
			await Submit();

		}
		else if (key == "Backspace")
		{
			DeleteLetter();
		}
		StateHasChanged();
	}
	#endregion
}
