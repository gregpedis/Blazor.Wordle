@inject IJSRuntime JSRuntime
@page "/"
@using Wordle.Logic;
@using System.Text.RegularExpressions;

<PageTitle>Wordle</PageTitle>

<div class="row justify-content-center">
	<div class="col"></div> @* Spacing *@
	<div class="col-auto">
		<h1 style="color:gray">Wordle</h1>
	</div>
	<div class="col"></div> @* Spacing *@
</div>

<br />

<div class="row justify-content-center">
	<div class="col"></div> @* Spacing *@
	<div class="col-auto">
		@foreach (var attempt in attempts)
		{
			<AttemptRow LetterColors="LetterColors" Attempt="attempt"></AttemptRow>
		}
	</div>
	<div class="col"></div> @* Spacing *@
</div>

<br />

<Keyboard LetterColors="LetterColors" AddLetter="AddLetter" DeleteLetter="DeleteLetter" Submit="Submit"></Keyboard>

@* --- DEBUG --- *@
<div>
	@for (int i = 0; i < attempts.Count; i++)
	{
		<span style="color:white">Index @i: @attempts[i].ToString()</span>
		<br />
	}
	}
</div>

<div>
	<span style="color:white">Row: @index</span>
</div>

<br />

<div>
	<span style="color:white">Target: @targetWord</span>
</div>

<div>
	<span style="color:white">Colors: @string.Join(Environment.NewLine,LetterColors.Select(x => $"{x.Key}:{x.Value}"))</span>
</div>

@* --- DEBUG --- *@

@code {

	private string targetWord = string.Empty;
	private int index = 0;
	private List<Attempt> attempts;
	private Dictionary<char, LetterColor> LetterColors;

	private void Reset()
	{
		targetWord = WordDatabase.Pick();
		attempts = Enumerable.Range(0, 6).Select(x => new Attempt()).ToList();
		LetterColors = LetterColorService.Default;
		StateHasChanged();
	}

	protected override void OnInitialized() => Reset();

	#region LOGIC

	private void AddLetter(char letter)
	{
		var soFar = attempts[index].ToString().TrimEnd();
		if (soFar.Length < 5)
		{
			var newValue = (soFar + char.ToUpper(letter)).PadRight(5);
			attempts[index].SetWord(newValue);
		}
	}

	private void DeleteLetter()
	{
		var soFar = attempts[index].ToString().TrimEnd();
		if (soFar.Length > 0)
		{
			var newValue = soFar.Substring(0, soFar.Length - 1).PadRight(5);
			attempts[index].SetWord(newValue);
		}
	}

	// TODO: LetterColors logic
	// TODO: Reset logic
	// TODO: Notify service
	// TODO: Mobile-first UI design
	private void Submit()
	{
		var guess = attempts[index].ToString();
		if (guess.TrimEnd().Length < 5)
		{
			// Either disable the button for <5, or show notification
		}
		else if (!WordDatabase.Exists(guess))
		{
			// Either disable the button for invalid, or show notification
		}
		else
		{
			LetterColorService.Update(guess, targetWord, LetterColors);

			// colorize letters
			if (WordFound)
			{
				// show winning message
				// show button for replay
			}
			else
			{
				if (index == 5)
				{
					// show losing message
					// show button for replay
				}
				else
				{
					index++;
				}
			}
		}
	}

	private bool WordFound =>
		attempts[index].ToString() == targetWord;

	#endregion

	#region Keyboard_Event
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JSRuntime.InvokeAsync<string>("addCustomEventListener", DotNetObjectReference.Create(this));
		}
	}

	[JSInvokable]
	public Task KeyDown(string key)
	{
		if (key.Length == 1 && Regex.IsMatch(key, "[a-zA-Z]"))
		{
			AddLetter(key.ToUpper()[0]);
		}
		else if (key == "Enter")
		{
			Submit();

		}
		else if (key == "Backspace")
		{
			DeleteLetter();
		}
		StateHasChanged();
		return Task.CompletedTask;
	}
	#endregion
}
